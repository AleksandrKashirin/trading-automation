"""–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Telegram"""
from typing import Dict, List
from datetime import datetime

class ReportFormatter:
    @staticmethod
    def format_portfolio_report(data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –¥–ª—è Telegram"""
        try:
            summary = data.get("summary", {})
            positions = data.get("positions", [])
            analysis = data.get("analysis", {})
            account_name = data.get("account_name", "–ü–æ—Ä—Ç—Ñ–µ–ª—å")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            total_equity = summary.get("total_equity", 0)
            total_pnl = summary.get("total_pnl", 0)
            cash_balance = summary.get("cash_balance_rub", 0)
            positions_count = summary.get("positions_count", 0)
            
            # P&L —Å –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞
            total_pnl_inception = analysis.get("total_pnl_from_inception", total_pnl)
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            invested_amount = total_equity - total_pnl if total_equity > total_pnl else total_equity
            pnl_percent = (total_pnl / invested_amount * 100) if invested_amount > 0 else 0
            pnl_inception_percent = (total_pnl_inception / invested_amount * 100) if invested_amount > 0 else 0
            
            report = []
            report.append(f"ü§ñ *{account_name.upper()}*")
            report.append(f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}")
            report.append("")
            
            # –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –∏ –ø—Ä–∏–±—ã–ª—å
            report.append(f"üí∞ *–û–ë–©–ò–ô –ö–ê–ü–ò–¢–ê–õ:* {total_equity:,.0f} ‚ÇΩ")
            if total_pnl_inception != total_pnl:
                report.append(f"üìà *P&L –° –û–¢–ö–†–´–¢–ò–Ø:* {total_pnl_inception:+,.0f} ‚ÇΩ ({pnl_inception_percent:+.1f}%)")
            report.append(f"üìä *P&L –¢–ï–ö–£–©–ò–ô:* {total_pnl:+,.0f} ‚ÇΩ ({pnl_percent:+.1f}%)")
            report.append("")
            
            # –ü–æ–∑–∏—Ü–∏–∏
            if positions:
                report.append("*–ü–û–ó–ò–¶–ò–ò:*")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–ø-5 –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
                sorted_positions = sorted(positions, key=lambda x: abs(x.get("total_value", 0)), reverse=True)
                top_positions = sorted_positions[:5]
                
                for pos in top_positions:
                    ticker = pos.get("ticker", "UNKNOWN")
                    shares = pos.get("shares", 0)
                    pnl = pos.get("pnl", 0)
                    pnl_percent = pos.get("pnl_percent", 0)
                    
                    # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç P&L
                    emoji = "üìà" if pnl > 0 else "üìâ" if pnl < 0 else "üìä"
                    
                    report.append(f"{emoji} {ticker}: {shares:.0f} —à—Ç")
                    report.append(f"üí∏ {pnl:+.0f} ‚ÇΩ ({pnl_percent:+.1f}%)")
                
                if len(positions) > 5:
                    report.append(f"... –∏ –µ—â–µ {len(positions) - 5} –ø–æ–∑–∏—Ü–∏–π")
                
                report.append("")
            
            # –ü–æ–∑–∏—Ü–∏–∏ –±–ª–∏–∑–∫–æ –∫ —Å—Ç–æ–ø-–ª–æ—Å—Å—É
            near_stop_loss = analysis.get("positions_near_stop_loss", [])
            if near_stop_loss:
                report.append("‚ö†Ô∏è *–ë–õ–ò–ó–ö–û –ö –°–¢–û–ü-–õ–û–°–°–£:*")
                for pos in near_stop_loss[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 —Å–∞–º—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ
                    ticker = pos.get("ticker", "UNKNOWN")
                    distance = pos.get("distance_to_stop_loss_percent", 0)
                    report.append(f"üî¥ {ticker}: {distance:.1f}% –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")
                report.append("")
            
            # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è –ø–æ–∑–∏—Ü–∏–∏
            best_pos = analysis.get("best_position", {})
            worst_pos = analysis.get("worst_position", {})
            
            if best_pos and worst_pos:
                report.append("*–≠–ö–°–¢–†–ï–ú–£–ú–´:*")
                report.append(f"üèÜ –õ—É—á—à–∞—è: {best_pos.get('ticker', 'N/A')} ({best_pos.get('pnl', 0):+.0f} ‚ÇΩ)")
                report.append(f"üíî –•—É–¥—à–∞—è: {worst_pos.get('ticker', 'N/A')} ({worst_pos.get('pnl', 0):+.0f} ‚ÇΩ)")
                report.append("")
            
            # –°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –∏—Ç–æ–≥–æ
            report.append(f"üíµ *–°–í–û–ë–û–î–ù–û:* {cash_balance:,.0f} ‚ÇΩ")
            report.append(f"üéØ *–í–°–ï–ì–û –ü–û–ó–ò–¶–ò–ô:* {positions_count}")
            
            return "\n".join(report)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"
    
    @staticmethod
    def format_race_report(data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –≥–æ–Ω–∫–µ –¥–ª—è Telegram"""
        try:
            if "error" in data:
                return f"‚ùå {data['error']}"
            
            period = data.get("period", {})
            portfolio_performance = data.get("portfolio_performance", [])
            moex_change = data.get("moex_change")
            daily_changes = data.get("daily_changes", [])
            
            report = []
            report.append("üèÅ *–ì–û–ù–ö–ê –ü–û–†–¢–§–ï–õ–ï–ô*")
            
            # –ü–µ—Ä–∏–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            if period:
                start_date = period.get("start_date", "")
                end_date = period.get("end_date", "")
                days = period.get("days", 0)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                try:
                    start_formatted = datetime.strptime(start_date, '%Y-%m-%d').strftime('%d.%m')
                    end_formatted = datetime.strptime(end_date, '%Y-%m-%d').strftime('%d.%m')
                    report.append(f"üìÖ –î–µ–Ω—å {days} ({start_formatted} ‚Äî {end_formatted})")
                except:
                    report.append(f"üìÖ –î–µ–Ω—å {days}")
            
            report.append("")
            
            # –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
            if portfolio_performance:
                report.append("*–†–ï–ô–¢–ò–ù–ì:*")
                
                medals = ["ü•á", "ü•à", "ü•â", "üîª"]
                
                for i, portfolio in enumerate(portfolio_performance):
                    name = portfolio.get("name", f"–ü–æ—Ä—Ç—Ñ–µ–ª—å {i+1}")
                    change_percent = portfolio.get("change_percent", 0)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
                    if len(name) > 15:
                        name = name[:12] + "..."
                    
                    medal = medals[i] if i < len(medals) else "üîπ"
                    report.append(f"{medal} {name}: {change_percent:+.2f}%")
                
                report.append("")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å MOEX
            if moex_change is not None:
                moex_emoji = "üìà" if moex_change > 0 else "üìâ" if moex_change < 0 else "üìä"
                report.append(f"{moex_emoji} MOEX: {moex_change:+.2f}%")
                report.append("")
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            if daily_changes:
                report.append("*–ó–ê –î–ï–ù–¨:*")
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–Ω—è
                best_daily = max(daily_changes, key=lambda x: x.get("change_percent", 0))
                worst_daily = min(daily_changes, key=lambda x: x.get("change_percent", 0))
                
                best_name = best_daily.get("name", "N/A")
                best_change = best_daily.get("change_percent", 0)
                worst_name = worst_daily.get("name", "N/A") 
                worst_change = worst_daily.get("change_percent", 0)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏–π
                if len(best_name) > 15:
                    best_name = best_name[:12] + "..."
                if len(worst_name) > 15:
                    worst_name = worst_name[:12] + "..."
                
                report.append(f"üìà –õ—É—á—à–∏–π: {best_name} {best_change:+.2f}%")
                report.append(f"üìâ –•—É–¥—à–∏–π: {worst_name} {worst_change:+.2f}%")
            
            return "\n".join(report)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≥–æ–Ω–∫–µ: {e}"
    
    @staticmethod
    def optimize_for_telegram(text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram"""
        max_length = 4096
        
        if len(text) <= max_length:
            return [text]
        
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lines = text.split('\n')
        
        for line in lines:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
            if len(line) > max_length:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                if current_part:
                    parts.append(current_part.strip())
                    current_part = ""
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = line.split('. ')
                temp_line = ""
                
                for sentence in sentences:
                    test_line = temp_line + sentence + ". " if temp_line else sentence + ". "
                    
                    if len(test_line) > max_length:
                        if temp_line:
                            parts.append(temp_line.strip())
                        temp_line = sentence + ". "
                    else:
                        temp_line = test_line
                
                if temp_line:
                    current_part = temp_line.strip()
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            test_part = current_part + "\n" + line if current_part else line
            
            if len(test_part) <= max_length:
                current_part = test_part
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                if current_part:
                    parts.append(current_part.strip())
                current_part = line
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        return parts if parts else [text]
    
    @staticmethod
    def format_error_report(error: str, context: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        report = []
        report.append("‚ùå *–û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´*")
        report.append("")
        report.append(f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {error}")
        
        if context:
            report.append(f"*–ö–æ–Ω—Ç–µ–∫—Å—Ç:* {context}")
        
        report.append("")
        report.append(f"*–í—Ä–µ–º—è:* {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        
        return "\n".join(report)