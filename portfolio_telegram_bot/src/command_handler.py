"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞"""
import logging
import threading
import time
from typing import Dict, List, Callable
from .telegram_bot import TelegramBot
from .portfolio_analyzer import PortfolioAnalyzer
from .race_tracker import RaceTracker
from .report_formatter import ReportFormatter
from .config import Config

logger = logging.getLogger(__name__)

class CommandHandler:
    def __init__(self, config: Config, telegram_bot: TelegramBot, 
                 portfolio_analyzer: PortfolioAnalyzer, race_tracker: RaceTracker,
                 report_formatter: ReportFormatter):
        self.config = config
        self.telegram_bot = telegram_bot
        self.portfolio_analyzer = portfolio_analyzer
        self.race_tracker = race_tracker
        self.report_formatter = report_formatter
        
        self.last_update_id = 0
        self.running = False
        self.polling_thread = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        self.commands = {
            '/start': self._cmd_start,
            '/help': self._cmd_help,
            '/status': self._cmd_status,
            '/portfolio': self._cmd_portfolio,
            '/race': self._cmd_race,
            '/chart': self._cmd_chart,
            '/report': self._cmd_full_report,
            '/pnl': self._cmd_pnl
        }
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ Telegram
        self._setup_bot_commands()
    
    def _setup_bot_commands(self) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ Telegram"""
        commands_list = [
            {'command': 'start', 'description': 'üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'},
            {'command': 'help', 'description': '‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º'},
            {'command': 'status', 'description': 'üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã'},
            {'command': 'portfolio', 'description': 'üíº –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é'},
            {'command': 'race', 'description': 'üèÅ –û—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ'},
            {'command': 'chart', 'description': 'üìà –ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏'},
            {'command': 'report', 'description': 'üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç'},
            {'command': 'pnl', 'description': 'üìã PNL'},
        ]
        
        if self.telegram_bot.set_commands(commands_list):
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞")
    
    def start_polling(self) -> None:
        """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥"""
        if self.running:
            logger.warning("Polling —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.running = True
        self.polling_thread = threading.Thread(target=self._polling_loop, daemon=True)
        self.polling_thread.start()
        
        logger.info("Command handler polling –∑–∞–ø—É—â–µ–Ω")
    
    def stop_polling(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        self.running = False
        if self.polling_thread:
            self.polling_thread.join(timeout=5)
        logger.info("Command handler polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _polling_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        while self.running:
            try:
                updates = self.telegram_bot.get_updates(
                    offset=self.last_update_id + 1,
                    timeout=30
                )
                
                if updates.get('ok') and updates.get('result'):
                    for update in updates['result']:
                        self._process_update(update)
                        self.last_update_id = update['update_id']
                
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ polling loop: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def _cmd_pnl(self, message: dict) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /pnl - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ P&L"""
        try:
            if not self.config.BOT_TRADER_ACCOUNT_ID:
                self.telegram_bot.send_message("‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –ë–æ—Ç-—Ç—Ä–µ–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            self.telegram_bot.send_message("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é P&L...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ P&L
            pnl_data = self.portfolio_analyzer.calculate_total_pnl_from_inception(
                self.config.BOT_TRADER_ACCOUNT_ID
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            pnl_report = self._format_detailed_pnl(pnl_data)
            self.telegram_bot.send_message(pnl_report)
            
        except Exception as e:
            error_text = self.report_formatter.format_error_report(str(e), "–ê–Ω–∞–ª–∏–∑ P&L")
            self.telegram_bot.send_message(error_text)

    def _format_detailed_pnl(self, pnl_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ P&L"""
        try:
            total_pnl = pnl_data.get("total_pnl", 0)
            money_invested = pnl_data.get("money_invested", 0)
            money_withdrawn = pnl_data.get("money_withdrawn", 0)
            dividends = pnl_data.get("dividends_received", 0)
            commissions = pnl_data.get("commissions_paid", 0)
            current_equity = pnl_data.get("current_equity", 0)
            net_invested = pnl_data.get("net_invested", 0)
            
            # –†–∞—Å—á–µ—Ç—ã
            pnl_percent = (total_pnl / net_invested * 100) if net_invested > 0 else 0
            commission_percent = (commissions / money_invested * 100) if money_invested > 0 else 0
            dividend_yield = (dividends / net_invested * 100) if net_invested > 0 else 0
            
            report = []
            report.append("üí∞ *–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó P&L*")
            report.append("")
            
            # –î–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            report.append("*–î–í–ò–ñ–ï–ù–ò–ï –°–†–ï–î–°–¢–í:*")
            report.append(f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {money_invested:+,.0f} ‚ÇΩ")
            report.append(f"üí∏ –í—ã–≤–æ–¥—ã: {money_withdrawn:+,.0f} ‚ÇΩ")
            report.append(f"üìä –ß–∏—Å—Ç—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {net_invested:+,.0f} ‚ÇΩ")
            report.append("")
            
            # –î–æ—Ö–æ–¥—ã
            report.append("*–î–û–•–û–î–´:*")
            report.append(f"üìà –û–±—â–∏–π P&L: {total_pnl:+,.0f} ‚ÇΩ ({pnl_percent:+.2f}%)")
            if dividends > 0:
                report.append(f"üí∞ –î–∏–≤–∏–¥–µ–Ω–¥—ã: {dividends:+,.0f} ‚ÇΩ ({dividend_yield:.2f}%)")
            report.append("")
            
            # –†–∞—Å—Ö–æ–¥—ã
            report.append("*–†–ê–°–•–û–î–´:*")
            report.append(f"üè¶ –ö–æ–º–∏—Å—Å–∏–∏: {commissions:,.0f} ‚ÇΩ ({commission_percent:.2f}%)")
            report.append("")
            
            # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            report.append("*–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:*")
            report.append(f"üíº –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {current_equity:,.0f} ‚ÇΩ")
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if net_invested > 0:
                annualized_return = total_pnl / net_invested * 100  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
                report.append(f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {annualized_return:.2f}%")
            
            return "\n".join(report)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è P&L –æ—Ç—á–µ—Ç–∞: {e}"
    
    def _process_update(self, update: dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            message = update.get('message', {})
            if not message:
                return
            
            chat_id = message.get('chat', {}).get('id')
            user_id = message.get('from', {}).get('id')
            text = message.get('text', '').strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
            if chat_id != self.config.CHAT_ID:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
            username = message.get('from', {}).get('username', 'Unknown')
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç @{username}: {text}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            if text.startswith('/'):
                command = text.split()[0].lower()
                if command in self.commands:
                    self.commands[command](message)
                else:
                    self._cmd_unknown(message, command)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def _cmd_start(self, message: dict) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = [
            "ü§ñ *PORTFOLIO TELEGRAM BOT*",
            "",
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –≤–∞—à–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è—Ö.",
            "",
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*",
            "üìä /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
            "üíº /portfolio - –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é",
            "üèÅ /race - –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ",
            "üìà /chart - –≥—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏",
            "üìã /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç",
            "üìã /pnl - PNL",
            "‚ùì /help - —Å–ø—Ä–∞–≤–∫–∞",
            "",
            f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã: {self.config.REPORT_TIME}",
            f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {self.config.TIMEZONE}"
        ]
        
        self.telegram_bot.send_message("\n".join(welcome_text))
    
    def _cmd_help(self, message: dict) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = [
            "‚ùì *–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú*",
            "",
            "üìä `/status` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞",
            "",
            "üíº `/portfolio` - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –ë–æ—Ç-—Ç—Ä–µ–π–¥–µ—Ä",
            "‚Ä¢ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –∏ P&L",
            "‚Ä¢ –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏",
            "‚Ä¢ –ü–æ–∑–∏—Ü–∏–∏ –±–ª–∏–∑–∫–æ –∫ —Å—Ç–æ–ø-–ª–æ—Å—Å—É",
            "",
            "üèÅ `/race` - –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π",
            "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π",
            "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å MOEX",
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å",
            "",
            "üìà `/chart` - –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –≥–æ–Ω–∫–∏",
            "",
            "üìã `/report` - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (–ø–æ—Ä—Ç—Ñ–µ–ª—å + –≥–æ–Ω–∫–∞ + –≥—Ä–∞—Ñ–∏–∫)",
            "",
            "*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:*",
            f"–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {self.config.REPORT_TIME}"
        ]
        
        self.telegram_bot.send_message("\n".join(help_text))
    
    def _cmd_status(self, message: dict) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        try:
            import schedule
            from datetime import datetime
            
            next_run = schedule.next_run()
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            moex_price = self.race_tracker.client.get_moex_index_price()
            api_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if moex_price else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            status_lines = [
                "üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´*",
                "",
                f"ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω",
                f"üîó Tinkoff API: {api_status}",
                f"üì± Telegram API: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç",
                "",
                f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M:%S')}",
                f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç: {next_run.strftime('%d.%m.%Y %H:%M')}",
                f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {self.config.TIMEZONE}",
                "",
                f"üìä –ü–æ—Ä—Ç—Ñ–µ–ª–µ–π –≤ –≥–æ–Ω–∫–µ: {len(self.config.PORTFOLIO_ACCOUNTS)}",
                f"üíº –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å: {self.config.BOT_TRADER_ACCOUNT_ID[-4:]}...{self.config.BOT_TRADER_ACCOUNT_ID[-4:]}" if self.config.BOT_TRADER_ACCOUNT_ID else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            ]
            
            if moex_price:
                status_lines.extend([
                    "",
                    f"üìà MOEX: {moex_price:.2f} –ø—É–Ω–∫—Ç–æ–≤"
                ])
            
            self.telegram_bot.send_message("\n".join(status_lines))
            
        except Exception as e:
            error_text = self.report_formatter.format_error_report(str(e), "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            self.telegram_bot.send_message(error_text)
    
    def _cmd_portfolio(self, message: dict) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /portfolio"""
        try:
            if not self.config.BOT_TRADER_ACCOUNT_ID:
                self.telegram_bot.send_message("‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª—å –ë–æ—Ç-—Ç—Ä–µ–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            self.telegram_bot.send_message("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_data = self.portfolio_analyzer.generate_portfolio_report(
                self.config.BOT_TRADER_ACCOUNT_ID
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            portfolio_report = self.report_formatter.format_portfolio_report(portfolio_data)
            self.telegram_bot.send_message(portfolio_report)
            
        except Exception as e:
            error_text = self.report_formatter.format_error_report(str(e), "–û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é")
            self.telegram_bot.send_message(error_text)
    
    def _cmd_race(self, message: dict) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /race"""
        try:
            if not self.config.PORTFOLIO_ACCOUNTS:
                self.telegram_bot.send_message("‚ùå –ü–æ—Ä—Ç—Ñ–µ–ª–∏ –¥–ª—è –≥–æ–Ω–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
            
            self.telegram_bot.send_message("üèÅ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
            race_data = self.race_tracker.generate_race_report()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            race_report = self.report_formatter.format_race_report(race_data)
            self.telegram_bot.send_message(race_report)
            
        except Exception as e:
            error_text = self.report_formatter.format_error_report(str(e), "–û—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ")
            self.telegram_bot.send_message(error_text)
    
    def _cmd_chart(self, message: dict) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /chart"""
        try:
            self.telegram_bot.send_message("üìà –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = self.race_tracker.create_performance_chart()
            
            if chart_path:
                caption = "üìà –ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π"
                self.telegram_bot.send_photo(chart_path, caption)
            else:
                self.telegram_bot.send_message("üìä –ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è)")
                
        except Exception as e:
            error_text = self.report_formatter.format_error_report(str(e), "–ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏")
            self.telegram_bot.send_message(error_text)
    
    def _cmd_full_report(self, message: dict) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            self.telegram_bot.send_message("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...")
            
            # 1. –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
            if self.config.BOT_TRADER_ACCOUNT_ID:
                portfolio_data = self.portfolio_analyzer.generate_portfolio_report(
                    self.config.BOT_TRADER_ACCOUNT_ID
                )
                portfolio_report = self.report_formatter.format_portfolio_report(portfolio_data)
                self.telegram_bot.send_message(portfolio_report)
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # 2. –û—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ
            if self.config.PORTFOLIO_ACCOUNTS:
                race_data = self.race_tracker.generate_race_report()
                race_report = self.report_formatter.format_race_report(race_data)
                self.telegram_bot.send_message(race_report)
                time.sleep(1)
            
            # 3. –ì—Ä–∞—Ñ–∏–∫
            chart_path = self.race_tracker.create_performance_chart()
            if chart_path:
                caption = "üìà –ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π"
                self.telegram_bot.send_photo(chart_path, caption)
            
            self.telegram_bot.send_message("‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!")
            
        except Exception as e:
            error_text = self.report_formatter.format_error_report(str(e), "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
            self.telegram_bot.send_message(error_text)
    
    def _cmd_unknown(self, message: dict, command: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        unknown_text = [
            f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `{command}`",
            "",
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞",
            "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
            "‚Ä¢ /portfolio - –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é",
            "‚Ä¢ /race - –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ",
            "‚Ä¢ /chart - –≥—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏",
            "‚Ä¢ /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"
        ]
        
        self.telegram_bot.send_message("\n".join(unknown_text))