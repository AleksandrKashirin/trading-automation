"""Telegram –±–æ—Ç"""
import logging
import time
from typing import List
import requests

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token: str, chat_id: int):
        self.token = token
        self.chat_id = chat_id
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.max_message_length = 4096
        self.max_retries = 3
        self.retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
    
    def _make_request(self, method: str, data: dict = None, files: dict = None) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        url = f"{self.api_url}/{method}"
        
        for attempt in range(self.max_retries):
            try:
                if files:
                    response = requests.post(url, data=data, files=files, timeout=30)
                else:
                    response = requests.post(url, json=data, timeout=30)
                
                response.raise_for_status()
                
                result = response.json()
                if result.get('ok'):
                    return True
                else:
                    logger.warning(f"Telegram API error: {result.get('description')}")
                    
            except requests.exceptions.RequestException as e:
                logger.warning(f"Attempt {attempt + 1}/{self.max_retries} failed: {e}")
                
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay * (attempt + 1))  # Exponential backoff
                else:
                    logger.error(f"All {self.max_retries} attempts failed for {method}")
                    return False
            
            except Exception as e:
                logger.error(f"Unexpected error in Telegram API call: {e}")
                return False
        
        return False
    
    def send_message(self, text: str, parse_mode='Markdown') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not text.strip():
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return False
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
        if len(text) > self.max_message_length:
            return self.send_long_message(text, parse_mode)
        
        data = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        
        success = self._make_request('sendMessage', data)
        if success:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        return success
    
    def send_photo(self, photo_path: str, caption: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        try:
            with open(photo_path, 'rb') as photo:
                files = {'photo': photo}
                data = {
                    'chat_id': self.chat_id,
                    'caption': caption[:1024] if caption else "",  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                    'parse_mode': 'Markdown'
                }
                
                success = self._make_request('sendPhoto', data, files)
                if success:
                    logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {photo_path}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {photo_path}")
                
                return success
                
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    def send_long_message(self, text: str, parse_mode='Markdown') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π"""
        if len(text) <= self.max_message_length:
            return self.send_message(text, parse_mode)
        
        parts = self._split_message(text)
        all_sent = True
        
        for i, part in enumerate(parts):
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i+1}/{len(parts)}")
            
            if not self.send_message(part, parse_mode):
                all_sent = False
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å {i+1}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if i < len(parts) - 1:
                time.sleep(1)
        
        return all_sent
    
    def _split_message(self, text: str) -> List[str]:
        """–£–º–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(text) <= self.max_message_length:
            return [text]
        
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lines = text.split('\n')
        
        for line in lines:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
            if len(line) > self.max_message_length:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                if current_part:
                    parts.append(current_part.strip())
                    current_part = ""
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ —Å–ª–æ–≤–∞–º
                words = line.split(' ')
                temp_line = ""
                
                for word in words:
                    if len(temp_line + word + " ") > self.max_message_length:
                        if temp_line:
                            parts.append(temp_line.strip())
                        temp_line = word + " "
                    else:
                        temp_line += word + " "
                
                if temp_line:
                    current_part = temp_line.strip()
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            test_part = current_part + "\n" + line if current_part else line
            
            if len(test_part) <= self.max_message_length:
                current_part = test_part
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                if current_part:
                    parts.append(current_part.strip())
                current_part = line
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        return parts
    
    def send_error_notification(self, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        error_text = f"‚ùå *–û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´*\n\n`{error_message}`\n\n_–í—Ä–µ–º—è: {time.strftime('%d.%m.%Y %H:%M:%S')}_"
        return self.send_message(error_text)
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
        try:
            data = {'chat_id': self.chat_id, 'text': 'ü§ñ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}
            return self._make_request('sendMessage', data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def get_updates(self, offset: int = 0, timeout: int = 30) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥)"""
        try:
            url = f"{self.api_url}/getUpdates"
            params = {
                'offset': offset,
                'timeout': timeout,
                'allowed_updates': ['message']
            }
            
            response = requests.get(url, params=params, timeout=timeout + 5)
            response.raise_for_status()
            
            return response.json()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return {'ok': False, 'result': []}
    
    def set_commands(self, commands: list) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            data = {'commands': commands}
            return self._make_request('setMyCommands', data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            return False