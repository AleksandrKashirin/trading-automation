"""–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
import schedule
import time
import logging
import traceback
from datetime import datetime
import pytz
from .config import Config
from .tinkoff_client import TinkoffClient
from .portfolio_analyzer import PortfolioAnalyzer
from .race_tracker import RaceTracker
from .telegram_bot import TelegramBot
from .report_formatter import ReportFormatter
from .command_handler import CommandHandler

logger = logging.getLogger(__name__)

class Scheduler:
    def __init__(self, config: Config):
        self.config = config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.tinkoff_client = TinkoffClient(config.TINKOFF_TOKEN)
        self.portfolio_analyzer = PortfolioAnalyzer(self.tinkoff_client)
        self.race_tracker = RaceTracker(self.tinkoff_client, config.DATA_DIRECTORY)
        self.telegram_bot = TelegramBot(config.TELEGRAM_TOKEN, config.CHAT_ID)
        self.report_formatter = ReportFormatter()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
        self.command_handler = CommandHandler(
            config=config,
            telegram_bot=self.telegram_bot,
            portfolio_analyzer=self.portfolio_analyzer,
            race_tracker=self.race_tracker,
            report_formatter=self.report_formatter
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        self.timezone = pytz.timezone(config.TIMEZONE)
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def run_daily_reports(self) -> None:
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        start_time = datetime.now()
        logger.info("=" * 60)
        logger.info("–ó–ê–ü–£–°–ö –ï–ñ–ï–î–ù–ï–í–ù–´–• –û–¢–ß–ï–¢–û–í")
        logger.info("=" * 60)
        
        try:
            # 1. –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é "–ë–æ—Ç-—Ç—Ä–µ–π–¥–µ—Ä"
            self._send_portfolio_report()
            
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
            self._update_race_data()
            
            # 3. –û—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
            self._send_race_report()
            
            # 4. –ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
            self._send_race_chart()
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            elapsed_time = (datetime.now() - start_time).total_seconds()
            success_message = f"‚úÖ *–û–¢–ß–ï–¢–´ –û–¢–ü–†–ê–í–õ–ï–ù–´*\n\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f} —Å–µ–∫"
            self.telegram_bot.send_message(success_message)
            
            logger.info(f"–í—Å–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞ {elapsed_time:.1f} —Å–µ–∫")
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö: {e}"
            logger.error(error_msg)
            logger.error(traceback.format_exc())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_report = self.report_formatter.format_error_report(
                error=str(e),
                context="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
            )
            self.telegram_bot.send_message(error_report)
    
    def _send_portfolio_report(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –ë–æ—Ç-—Ç—Ä–µ–π–¥–µ—Ä"""
        try:
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –ë–æ—Ç-—Ç—Ä–µ–π–¥–µ—Ä...")
            
            if not self.config.BOT_TRADER_ACCOUNT_ID:
                raise ValueError("BOT_TRADER_ACCOUNT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_data = self.portfolio_analyzer.generate_portfolio_report(
                self.config.BOT_TRADER_ACCOUNT_ID
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            portfolio_report = self.report_formatter.format_portfolio_report(portfolio_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if self.telegram_bot.send_message(portfolio_report):
                logger.info("–û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é: {e}"
            logger.error(error_msg)
            self.telegram_bot.send_error_notification(error_msg)
            raise
    
    def _update_race_data(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π"""
        try:
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π...")
            
            if not self.config.PORTFOLIO_ACCOUNTS:
                raise ValueError("PORTFOLIO_ACCOUNTS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            if len(self.config.PORTFOLIO_ACCOUNTS) < 4:
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –¥–ª—è –≥–æ–Ω–∫–∏: {len(self.config.PORTFOLIO_ACCOUNTS)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.race_tracker.update_daily_data(self.config.PORTFOLIO_ACCOUNTS)
            logger.info("–î–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏: {e}"
            logger.error(error_msg)
            self.telegram_bot.send_error_notification(error_msg)
            raise
    
    def _send_race_report(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –≥–æ–Ω–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π"""
        try:
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≥–æ–Ω–∫–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
            race_data = self.race_tracker.generate_race_report()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            race_report = self.report_formatter.format_race_report(race_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if self.telegram_bot.send_message(race_report):
                logger.info("–û—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –≥–æ–Ω–∫–µ: {e}"
            logger.error(error_msg)
            self.telegram_bot.send_error_notification(error_msg)
            raise
    
    def _send_race_chart(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π"""
        try:
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≥–æ–Ω–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = self.race_tracker.create_performance_chart()
            
            if chart_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                caption = "üìà –ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π"
                if self.telegram_bot.send_photo(chart_path, caption):
                    logger.info("–ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
            else:
                logger.warning("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")
                self.telegram_bot.send_message("üìä –ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}"
            logger.error(error_msg)
            # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.telegram_bot.send_message(f"‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
    
    def run_manual_reports(self) -> None:
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info("–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–æ–≤")
        self.run_daily_reports()
    
    def test_system(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            
            # 1. –¢–µ—Å—Ç Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if not self.telegram_bot.test_connection():
                raise Exception("Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # 2. –¢–µ—Å—Ç Tinkoff API
            if not self.tinkoff_client.get_currency_rates():
                raise Exception("Tinkoff API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
            if self.config.BOT_TRADER_ACCOUNT_ID:
                portfolio_data = self.tinkoff_client.get_portfolio_data(
                    self.config.BOT_TRADER_ACCOUNT_ID
                )
                if not portfolio_data:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            
            # 4. –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏
            if self.config.PORTFOLIO_ACCOUNTS:
                race_data = self.race_tracker.generate_race_report()
                if "error" in race_data:
                    logger.warning(f"–î–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏: {race_data['error']}")
            
            # 5. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
            logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
            test_message = [
                "‚úÖ *–°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢*",
                "",
                "üß™ *–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã:*",
                "‚Ä¢ Telegram API",
                "‚Ä¢ Tinkoff API", 
                "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥",
                "",
                "üí¨ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*",
                "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞",
                "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
                "‚Ä¢ /portfolio - –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é",
                "‚Ä¢ /race - –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ", 
                "‚Ä¢ /chart - –≥—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏",
                "‚Ä¢ /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"
            ]
            
            self.telegram_bot.send_message("\n".join(test_message))
            logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
            logger.error(error_msg)
            self.telegram_bot.send_error_notification(error_msg)
            return False
    
    def start_daily_scheduler(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á–∏
        schedule.every().day.at(self.config.REPORT_TIME).do(self.run_daily_reports)
        
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"–û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {self.config.REPORT_TIME} ({self.config.TIMEZONE})")
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
        self.command_handler.start_polling()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = [
            "üöÄ *–ë–û–¢ –ó–ê–ü–£–©–ï–ù*",
            "",
            f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã: {self.config.REPORT_TIME}",
            f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {self.config.TIMEZONE}",
            "",
            "üí¨ *–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã:*",
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞",
            "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å", 
            "‚Ä¢ /portfolio - –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é",
            "‚Ä¢ /race - –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ",
            "‚Ä¢ /chart - –≥—Ä–∞—Ñ–∏–∫",
            "‚Ä¢ /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"
        ]
        self.telegram_bot.send_message("\n".join(startup_message))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.command_handler.stop_polling()
                self.telegram_bot.send_message("üõë *–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù*")
                break
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
                time.sleep(60)
    
    def get_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            next_run = schedule.next_run()
            
            status_lines = [
                "ü§ñ *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´*",
                "",
                f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç: {next_run.strftime('%d.%m.%Y %H:%M')}",
                f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {self.config.TIMEZONE}",
                f"üìä –ü–æ—Ä—Ç—Ñ–µ–ª–µ–π –≤ –≥–æ–Ω–∫–µ: {len(self.config.PORTFOLIO_ACCOUNTS)}",
                "",
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            ]
            
            return "\n".join(status_lines)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"