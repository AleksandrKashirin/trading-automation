"""–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
import schedule
import time
import logging
from datetime import datetime
import pytz
from .config import Config
from .tinkoff_client import TinkoffClient
from .portfolio_analyzer import PortfolioAnalyzer
from .race_tracker import RaceTracker
from .telegram_bot import TelegramBot
from .report_formatter import ReportFormatter

logger = logging.getLogger(__name__)

class Scheduler:
    def __init__(self, config: Config):
        self.config = config
        self.tinkoff_client = TinkoffClient(config.TINKOFF_TOKEN)
        self.portfolio_analyzer = PortfolioAnalyzer(self.tinkoff_client)
        self.race_tracker = RaceTracker(self.tinkoff_client, config.DATA_DIRECTORY)
        self.telegram_bot = TelegramBot(config.TELEGRAM_TOKEN, config.CHAT_ID)
        self.report_formatter = ReportFormatter()
    
    def run_daily_reports(self) -> None:
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
            
            # –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é "–ë–æ—Ç-—Ç—Ä–µ–π–¥–µ—Ä"
            portfolio_data = self.portfolio_analyzer.generate_portfolio_report(
                self.config.BOT_TRADER_ACCOUNT_ID
            )
            portfolio_report = self.report_formatter.format_portfolio_report(portfolio_data)
            self.telegram_bot.send_message(portfolio_report)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏
            self.race_tracker.update_daily_data(self.config.PORTFOLIO_ACCOUNTS)
            
            # –û—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ
            race_data = self.race_tracker.generate_race_report()
            race_report = self.report_formatter.format_race_report(race_data)
            self.telegram_bot.send_message(race_report)
            
            # –ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏
            chart_path = self.race_tracker.create_performance_chart()
            if chart_path:
                self.telegram_bot.send_photo(chart_path, "üìà –ì—Ä–∞—Ñ–∏–∫ –≥–æ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π")
            
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            self.telegram_bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    def start_daily_scheduler(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        schedule.every().day.at(self.config.REPORT_TIME).do(self.run_daily_reports)
        
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {self.config.REPORT_TIME}")
        
        while True:
            schedule.run_pending()
            time.sleep(60)
